{"version":3,"sources":["logo.svg","FormElements.jsx","DynamicTable.js","App.js","reportWebVitals.js","index.js"],"names":["TextField","props","name","label","placeholder","rest","for","className","type","id","render","msg","style","color","SubmitButton","title","isSubmitting","useFormikContext","disabled","DynamicTable","errors","values","touched","setValues","axios","create","headers","Accept","baseURL","state","cost","year","items","event","this","setState","target","value","console","log","message","push","Array","from","document","querySelectorAll","forEach","input","i","splice","context","map","o","onClick","handleItemDeleted","bind","renderRows","onChange","updateName","updateCost","updateYear","min","max","field","updateType","handleClick","React","Component","FormSchema","Yup","shape","required","damagecost","claimtype","App","useState","formData","enableReinitialize","validationSchema","initialValues","onSubmit","setSubmitting","resetForm","setStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02ce32bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport {\n    Formik,\n    Form as FormikForm,\n    Field,\n    ErrorMessage,\n    useFormikContext,\n    useField,\n    useFormik\n} from 'formik';\nimport * as Yup from 'yup';\n\n\n\nexport function Form(props) {\n    return (\n        <Formik\n            {...props}\n        >\n            \n            <FormikForm className=\"needs-validation\">\n                {props.children}\n            </FormikForm>\n        </Formik>)\n}\n\nexport function TextField(props) {\n    const { name, label, placeholder, ...rest } = props\n    return (\n        <>\n            {label && <label for={name}>{label}</label>}\n            <Field\n                className=\"form-control\"\n                type=\"name\"\n                name={name}\n                id={name}\n                placeholder={placeholder || \"\"} \n                {...rest}\n            />\n            <ErrorMessage name={name} render={msg => <div style={{ color: 'red' }} >{msg}</div>} />\n        </>\n    )\n}\n\nexport function SelectField(props) {\n    const { name, label, options } = props\n    return (\n        <>\n            {label && <label for={name}>{label}</label>}\n            <Field\n                as=\"select\"\n                id={name}\n                name={name}\n            >\n                <option value=\"\" >Choose...</option>\n                {options.map((optn, index) => <option value={optn.value} label={optn.label || optn.value} />)}\n            </Field>\n            <ErrorMessage name={name} render={msg => <div style={{ color: 'red' }} >{msg}</div>} />\n        </>\n    )\n}\n\nexport function SubmitButton(props){\n    const { title, ...rest } = props;\n    const { isSubmitting } = useFormikContext();\n    \n    return (\n        <button type=\"submit\" {...rest} disabled={isSubmitting}>{title}</button>\n    )\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { Field } from 'formik';\nimport { Form, TextField, SelectField, SubmitButton } from './FormElements';\n\nexport default class DynamicTable extends React.Component {\n  constructor(props, errors, values, touched, setValues) {\n    super(props);\n    this.axios = axios.create({\n      headers: {\n        'Content-Type': 'application/json', Accept: 'application/json',\n        'Access-Control-Allow-Origin': 'http://localhost:3000',\n        \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n      },\n      baseURL: 'https://localhost:5001',\n    })\n    this.errors = errors\n    // axios.get()\n    this.state = {\n      name: \"\",\n      cost: 0,\n      year: 0,\n      type: \"\",\n      items: []\n    }\n  }\n\n  updateName(event) {\n\n    this.setState({\n      name: event.target.value\n    });\n  }\n  updateCost(event) {\n\n    this.setState({\n      cost: event.target.value\n    });\n  }\n  updateYear(event) {\n\n    this.setState({\n      year: event.target.value\n    });\n  }\n\n  updateType(event) {\n    console.log(event.target.value)\n    this.setState({\n      type: event.target.value\n    });\n  }\n\n\n  updateMessage(event) {\n    // console.log(this.axios.get('/Insurance'));\n\n    this.setState({\n      message: event.target.value\n    });\n  }\n\n  handleClick() {\n\n\n    var items = this.state.items;\n    console.log(this.state)\n    if(this.state.name)\n    items.push({\n      name: this.state.name,\n      cost: this.state.cost,\n      year: this.state.year,\n      type: this.state.type\n    });\n\n\n    Array.from(document.querySelectorAll(\"input\")).forEach(\n      input => (input.value = \"\")\n    );\n    this.setState({\n      items: items,\n      message: \"\"\n    });\n  }\n\n  // handleItemChanged(i, event) {\n  //   var items = this.state.items;\n  //   items[i] = event.target.value;\n\n  //   this.setState({\n  //     items: items\n  //   });\n  // }\n\n  handleItemDeleted(i) {\n    var items = this.state.items;\n\n    items.splice(i, 1);\n\n    this.setState({\n      items: items\n    });\n  }\n\n  renderRows() {\n    var context = this;\n\n    return this.state.items.map(function (o, i) {\n      // console.log(o)\n      return (\n        <tr key={\"item-\" + i}>\n          <td>\n            {o.name}\n          </td>\n          <td>\n            {o.year}\n          </td>\n          <td>\n            {o.cost}\n          </td>\n          <td>\n            {o.type}\n          </td>\n          <td>\n            <button\n              onClick={context.handleItemDeleted.bind(context, i)}\n            >\n              Delete\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"\">\n          <thead>\n            <tr>\n              <th>\n                Name\n              </th>\n              <th>\n                DamageCost\n              </th>\n              <th>\n                Year\n              </th>\n              <th>\n                Type\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {this.renderRows()}\n            <tr>\n              <td>\n                <TextField\n                  name=\"name\"\n                  onChange={this.updateName.bind(this)}\n                />\n              </td>\n              <td>\n                <TextField\n                  name=\"damagecost\"\n                  type='number'\n                  onChange={this.updateCost.bind(this)}\n                />\n              </td>\n              <td>\n                <TextField\n                  name=\"year\"\n                  onChange={this.updateYear.bind(this)}\n                  type='number'\n                  min={1000}\n                  max={9999}\n                />\n              </td>\n              <td>\n              <Field name=\"claimtype\">\n                                    {({ field }) => (\n                                        <select {...field} className={'form-control'+ (this.errors.type)} onChange={this.updateType.bind(this)}>\n                                            <option value=\"\"></option>\n                                            {['Collision',\"Grounding\",\"Bad Weather\",\"Fire\"].map(i => \n                                                <option key={i} value={i}>{i}</option>\n                                            )}\n                                        </select>\n                                    )}\n                                    </Field>\n                {/* <select id=\"lang\" onChange={this.updateType.bind(this)} value={this.state.value}>\n                  <option value=\"select\">Select</option>\n                  <option value=\"Collision\">Collision</option>\n                  <option value=\"Grounding\">Grounding</option>\n                  <option value=\"Bad Weather\">Bad Weather</option>\n                  <option value=\"Fire\">Fire</option>\n                </select> */}\n                {/* <select\n                  name=\"type\"\n                  onChange={this.updateType.bind(this)}\n                  options={[\n                    {\n                      label: \"Collision\",\n                      value: \"Collision\"\n                    },\n                    {\n                      label: \"Grounding\",\n                      value: \"Grounding\"\n                    },\n                    {\n                      label: \"Bad Weather\",\n                      value: \"Bad Weather\"\n                    },\n                    {\n                      label: \"Fire\",\n                      value: \"Fire\"\n                    }\n                  ]}\n                /> */}\n              </td>\n              <td>\n                <SubmitButton\n                  title=\"Add a claim\"\n                  onClick={this.handleClick.bind(this)}\n                >\n                </SubmitButton>\n              </td>\n\n            </tr>\n          </tbody>\n        </table>\n\n\n      </div>\n    );\n  }\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\nimport { Form, TextField, SelectField, SubmitButton } from './FormElements';\nimport DynamicTable from './DynamicTable';\nimport * as Yup from 'yup';\nimport {\n  Formik,\n  Form as FormikForm\n}\n  from 'formik';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Required'),\n  damagecost: Yup.string()\n    .required('Required'),\n  claimtype: Yup.string()\n    .required('Number of tickets is required'),\n});\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    \n  });\n\n  const onSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    // console.log(values);\n    setSubmitting(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Formik\n        enableReinitialize\n        validationSchema={FormSchema}\n        initialValues={formData}\n        onSubmit={onSubmit}\n      >\n        {({ errors, values, touched, setValues }) => (\n          <FormikForm className=\"needs-validation\">\n\n            <DynamicTable errors={errors}\n              values={values}\n              touched={touched}\n              setValues={setValues}>\n\n            </DynamicTable>\n          </FormikForm>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}